#!/bin/bash

_ftscript_internal() {

	# --- Functions ---

	_ftscript_test() {
		echo in test function
	}

	_ftscript_build() {
		echo in build function
	}

	_ftscript_clean() {
		echo in clean function
	}

	# --- Helpers ---
	_debug() { [[ "$DEBUG" == true ]] && echo "[DEBUG] $1" >&2; }
	_inform() { [[ "$VERBOSE" == true ]] && echo "[INFO] $1" >&2; }

	# --- Constants ---
	readonly MAIN_SCRIPT_NAME="ftscript"
	readonly SCRIPT_DIR=$(dirname "$_SCRIPT_RESOLVED_PATH")
	readonly SYMLINK_SUBDIR=".ftscript_links"
	readonly COMMAND_DIR="${SCRIPT_DIR}/${SYMLINK_SUBDIR}"
	readonly INVOKED_AS="$(basename "$0")"
	readonly VALID_COMMANDS=("test" "build" "clean")

	# --- State ---
	local DEBUG=false
	local VERBOSE=false
	local IS_SOURCED=false
	local IS_SCRIPT_IN_PATH=false
	local IS_SYMLINKDIR_CREATED=false
	local ARGS=()

	# --- Detect sourcing ---
	if [[ "$0" != "$BASH_SOURCE" ]]; then
		IS_SOURCED=true
	fi

	# --- Check if symlink dir exists and is in PATH ---
	if [[ -d "$COMMAND_DIR" ]]; then
		IS_SYMLINKDIR_CREATED=true
		[[ ":$PATH:" == *":$COMMAND_DIR:"* ]] && IS_SCRIPT_IN_PATH=true
	fi

	# --- Arg parsing ---
	while [[ $# -gt 0 ]]; do
		case "$1" in
			--debug) DEBUG=true ;;
			--verbose) VERBOSE=true ;;
			-*) echo "Warning: Unknown option '$1'" >&2 ;;
			*) ARGS+=("$1") ;;
		esac
		shift
	done

	# --- If sourced: export path ---
	if [[ "$IS_SOURCED" == true ]]; then
		if [[ "$IS_SYMLINKDIR_CREATED" != true ]]; then
			echo "Command links not yet set up" >&2
		fi
		if [[ "$IS_SCRIPT_IN_PATH" != true ]]; then
			export PATH="${PATH}:${COMMAND_DIR}"
			echo "Command links now available" >&2
		else
			echo "Command directory already in PATH" >&2
		fi
		if [[ "$IS_SYMLINKDIR_CREATED" == true ]]; then
			return 0
		else
			return 3
		fi
	fi

	# --- Create symlinks if invoked as main script without args ---
	if [[ "$INVOKED_AS" == "$MAIN_SCRIPT_NAME" && ${#ARGS[@]} -eq 0 ]]; then
		mkdir -p "$COMMAND_DIR" || {
			echo "Error: Failed to create '$COMMAND_DIR'" >&2
			return 4
		}
		IS_SYMLINKDIR_CREATED=true

		local created=0 exists=0 cmd
		for cmd in "${VALID_COMMANDS[@]}"; do
			local link="${COMMAND_DIR}/ft${cmd}"
			if [[ -e "$link" ]]; then
				((exists++))
				_debug "Symlink already exists: ft${cmd}"
			else
				ln -sf "${SCRIPT_DIR}/${MAIN_SCRIPT_NAME}" "$link" && ((created++))
				_inform "Created symlink: ft${cmd}"
			fi
		done

		(( created > 0 )) && echo "Created ${created} new symlinks"
		(( exists == ${#VALID_COMMANDS[@]} )) && echo "All symlinks already exist"

		if [[ ":$PATH:" != *":$COMMAND_DIR:"* ]]; then
			echo "Run 'source ${MAIN_SCRIPT_NAME}' to enable command links" >&2
		fi
		return 0
	fi

	# --- Dispatch ---
	local command_name

	_debug "Invoked as: $INVOKED_AS with args: ${ARGS[*]}"

	if [[ "$INVOKED_AS" == "$MAIN_SCRIPT_NAME" ]]; then
		command_name="${ARGS[0]}"
	else
		command_name="${INVOKED_AS#ft}"
	fi

	# --- Validate ---
	for cmd in "${VALID_COMMANDS[@]}"; do
		if [[ "$cmd" == "$command_name" ]]; then
			_inform "Running: $command_name"
			_debug "Args: ${ARGS[*]:1}"

			case "$command_name" in
				test) _ftscript_test "${ARGS[@]:1}" ;;
				build) _ftscript_build "${ARGS[@]:1}" ;;
				clean) _ftscript_clean "${ARGS[@]:1}" ;;
				*) return 1 ;;
			esac
		fi
	done

	# --- Invalid command fallback ---
	echo "Error: Invalid command '$command_name'" >&2
	echo "Available commands: ${VALID_COMMANDS[*]/#/ft}" | sed 's/ /, /g' >&2
	return 1
}

# --- Entrypoint ---
_SCRIPT_RESOLVED_PATH=$(realpath "${BASH_SOURCE[0]:-$0}" 2>/dev/null) || {
	echo "Error: Could not resolve script path" >&2
	exit 1
}
_ftscript_internal "$@"

status=$?
[[ "$0" != "$BASH_SOURCE" ]] && return $status || exit $status

return $?
