#!/bin/bash

ftscript_main() {
	readonly MAIN_SCRIPT_NAME="ftscript"
	readonly SCRIPT_DIR=$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")" && pwd)
	readonly SYMLINK_SUBDIR=".ftscript_links"
	readonly COMMAND_DIR="${SCRIPT_DIR}/${SYMLINK_SUBDIR}"

	DEBUG=false
	VERBOSE=false
	ARGS=()

	readonly VALID_COMMANDS=("test" "build" "clean")

	ftscript_test() {
		inform "Starting test procedure"
		debug "Test environment checks"
		echo "Running test suite"
	}

	ftscript_build() {
		inform "Initializing build"
		debug "Build parameters: ${ARGS[*]:1}"
		echo "Building project"
	}

	ftscript_clean() {
		inform "Beginning cleanup"
		debug "Clean target: $PWD"
		echo "Cleaning build artifacts"
	}

	debug() {
		[[ "$DEBUG" == true ]] && echo "[DEBUG] $1" >&2
	}

	inform() {
		[[ "$VERBOSE" == true ]] && echo "[INFO] $1" >&2
	}

	is_valid_command() {
		[[ " ${VALID_COMMANDS[*]} " =~ " $1 " ]]
	}
	check_symlink_status() {
		if [[ ! -d "$COMMAND_DIR" ]]; then
			inform "Command links directory missing"
			echo "Notice: Run './${MAIN_SCRIPT_NAME}' to create symlinks" >&2
		elif [[ ":$PATH:" != *":$COMMAND_DIR:"* ]]; then
			inform "Symlinks not in PATH"
			echo "Notice: Run 'source ${MAIN_SCRIPT_NAME}' to enable commands" >&2
		fi
	}

	setup_command_links() {
		mkdir -p "$COMMAND_DIR" || {
			echo "Error: Failed to create directory '$COMMAND_DIR'" >&2
			return 1
		}

		local created=0 exists=0
		for cmd in "${VALID_COMMANDS[@]}"; do
			local link="${COMMAND_DIR}/ft${cmd}"
			if [[ -e "$link" ]]; then
				((exists++))
				debug "Symlink exists: ft${cmd}"
			else
				ln -sf "${SCRIPT_DIR}/${MAIN_SCRIPT_NAME}" "$link" && ((created++))
				inform "Created symlink: ft${cmd}"
			fi
		done

		(( created > 0 )) && echo "Created ${created} new symlinks"
		(( exists == ${#VALID_COMMANDS[@]} )) && echo "All symlinks already exist"

		check_symlink_status
		return 0
	}

	dispatch_command() {
		local invoked_as
		invoked_as="$(basename "$0")"
		local command_name

		debug "Invoked as: $invoked_as with args: ${ARGS[*]}"

		if [[ "$invoked_as" == "$MAIN_SCRIPT_NAME" ]]; then
			[[ ${#ARGS[@]} -eq 0 ]] && {
				setup_command_links
				return $?
			}
			command_name="${ARGS[0]}"
		else
			command_name="${invoked_as#ft}"
		fi

		if is_valid_command "$command_name"; then
			inform "Executing: $command_name"
			debug "Command args: ${ARGS[@]:1}"
			"ftscript_${command_name}" "${ARGS[@]:1}"
		else
			echo "Error: Invalid command '$command_name'" >&2
			echo "Available: ${VALID_COMMANDS[*]/#/ft}" | sed 's/ /, /g' >&2
			return 1
		fi
	}

	while [[ $# -gt 0 ]]; do
		case "$1" in
			--debug)
				DEBUG=true
				shift
				;;
			--verbose)
				VERBOSE=true
				shift
				;;
			-*)
				echo "Warning: Unknown option '$1'" >&2
				shift
				;;
			*)
				ARGS+=("$1")
				shift
				;;
		esac
	done

	dispatch_command || exit $?
}


if [[ "$0" == "$BASH_SOURCE" ]]; then
	ftscript_main "$@"
else
	if [[ -d "$COMMAND_DIR" ]]; then
		if [[ ":$PATH:" != *":$COMMAND_DIR:"* ]]; then
			export PATH="${PATH}:${COMMAND_DIR}"
			echo "Command links now available" >&2
		else
			echo "Command directory already in PATH" >&2
		fi
	else
		echo "Notice: Command links not set up" >&2
		return 1
	fi
fi
