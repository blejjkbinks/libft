#!/bin/bash

_ftscript_main() {

local valid_commands=('test' 'test2')
local execpath=$(realpath -e "$_FTSCRIPT_ZERO" 2>/dev/null)
[[ -z execpath ]] && execpath="$_FTSCRIPT_ZERO"
[[ "$execpath" != /* ]] && execpath="$PWD/$execpath"
local script_dir="$(dirname "$execpath" 2>/dev/null)"
#dirname alt
local invoked_as="$(basename "$execpath" 2>/dev/null)"
#basename alt
local script_name="ftscript"
local symlink_dir="${script_dir}/.ftscript_links"
local is_sourced=false
[[ "$0" != "$BASH_SOURCE" ]] && is_sourced=true
local is_symlinkcreated=false
[[ -d "$symlink_dir" ]] && is_symlinkcreated=true
local is_inpath=false
[[ ":$PATH:" == *":$symlink_dir:"* ]] && is_inpath=true
local symlink_created=()
local symlink_existed=()
#config, like is_inconfig, config_guesses, config_actual
local isdebug=true
showdebug(){ [[ "$isdebug" == true ]] && echo "[DEBUG] $1" >&2;}
local argv=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d|--debug) isdebug=true && showdebug "debugging" ;;
    -*) echo "Warning: Unknown option '$1'" >&2 ;;
    *) argv+=("$1") ;;
  esac
  shift
done
local exec_command
if [[ "$invoked_as" == "$script_name" ]]; then
  exec_command="${argv[0]}"
  argv=("${argv[@]:1}")
else
  exec_command="${invoked#ft}"
fi

showdebug "zero:$_FTSCRIPT_ZERO:"
showdebug "pwd:$PWD:"
showdebug "execpath:$execpath:"
showdebug "script_dir:$script_dir:"
showdebug "invoked_as:$invoked_as:"
showdebug "symlink_dir:$symlind_dir:"

local comm link
for comm in "${valid_commands[@]}"; do
  link="${symlink_dir}/ft${comm}"
  if [[ -e "$link" ]]; then
    symlink_existed+=("$comm")
  else
    #ln -sf "${script_dir}/${script_name}" "$link"
    symlink_created+=("$comm")
  fi
  showdebug "existed: ${symlink_existed[*]}"
  showdebug "created: ${symlink_created[*]}"
done

if [[ " ${valid_commands[*]} " == *" $exec_command "* ]]; then
  showdebug "running >$exec_command< with args >${argv[*]}<"
else
  showdebug "wrong command >$exec_command< with args >${argv[*]}<"
  return 1
fi

}

_FTSCRIPT_ZERO="${BASH_SOURCE[0]:-$0}"
_ftscript_main "$@"
_FTSCRIPT_EXIT=$?
[[ "$0" != "$BASH_SOURCE" ]] && return $_FTSCRIPT_EXIT || exit $_FTSCRIPT_EXIT
