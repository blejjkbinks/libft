#!/bin/bash

_ftscript_internal() {

	readonly MAIN_SCRIPT_NAME="ftscript"
	readonly SCRIPT_DIR=$(dirname "$_SCRIPT_RESOLVED_PATH")
	readonly SYMLINK_SUBDIR=".ftscript_links"
	readonly COMMAND_DIR="${SCRIPT_DIR}/${SYMLINK_SUBDIR}"
	readonly VALID_COMMANDS=("test" "build" "clean")

#	echo "MAIN_SCRIPT_NAME : $MAIN_SCRIPT_NAME"
#	echo "SCRIPT_PATH : $_SCRIPT_RESOLVED_PATH"
#	echo "SCRIPT_DIR : $SCRIPT_DIR"
#	echo "COMMAND_DIR : $COMMAND_DIR"

	local DEBUG=false
	local VERBOSE=false
	local IS_SOURCED=false
	local IS_SCRIPT_IN_PATH=false
	local IS_SYMLINKDIR_CREATED=false
	local ARGS=()

	if [[ "$0" != "$BASH_SOURCE" ]]; then
		IS_SOURCED=true
	fi

	if [[ -d "$COMMAND_DIR" ]]; then
		IS_SYMLINKDIR_CREATED=true
		if [[ ":$PATH:" == *":$COMMAND_DIR:"* ]]; then
			IS_SCRIPT_IN_PATH=true
		fi
	fi

	_ftscript_test() {
		_inform "Starting test procedure"
		_debug "Test environment checks"
		echo "Running test suite"
	}

	_ftscript_build() {
		_inform "Initializing build"
		_debug "Build parameters: ${ARGS[*]:1}"
		echo "Building project"
	}

	_ftscript_clean() {
		_inform "Beginning cleanup"
		_debug "Clean target: $PWD"
		echo "Cleaning build artifacts"
	}

	_debug() { [[ "$DEBUG" == true ]] && echo "[DEBUG] $1" >&2; }
	_inform() { [[ "$VERBOSE" == true ]] && echo "[INFO] $1" >&2; }
	_is_valid_command() { [[ " ${VALID_COMMANDS[*]} " =~ " $1 " ]]; }

	_check_symlink_status() {
		if [[ "$IS_SYMLINKDIR_CREATED" != true ]]; then
			_inform "Command links directory missing"
			echo "Notice: Run './${MAIN_SCRIPT_NAME}' to create symlinks" >&2
			return 1
		elif [[ "$IS_SCRIPT_IN_PATH" != true ]]; then
			_inform "Symlinks not in PATH"
			echo "Notice: Run 'source ${MAIN_SCRIPT_NAME}' to enable commands" >&2
			return 2
		fi
		return 0
	}

	_setup_command_links() {
		mkdir -p "$COMMAND_DIR" || {
			echo "Error: Failed to create directory '$COMMAND_DIR'" >&2
			return 1
		}
		IS_SYMLINKDIR_CREATED=true

		local created=0 exists=0
		for cmd in "${VALID_COMMANDS[@]}"; do
			local link="${COMMAND_DIR}/ft${cmd}"
			if [[ -e "$link" ]]; then
				((exists++))
				_debug "Symlink exists: ft${cmd}"
			else
				ln -sf "${SCRIPT_DIR}/${MAIN_SCRIPT_NAME}" "$link" && ((created++))
				_inform "Created symlink: ft${cmd}"
			fi
		done

		(( created > 0 )) && echo "Created ${created} new symlinks"
		(( exists == ${#VALID_COMMANDS[@]} )) && echo "All symlinks already exist"

		_check_symlink_status
		return 0
	}

	_dispatch_command() {
		local invoked_as
		invoked_as="$(basename "$0")"
		local command_name

		_debug "Invoked as: $invoked_as with args: ${ARGS[*]}"

		if [[ "$invoked_as" == "$MAIN_SCRIPT_NAME" ]]; then
			[[ ${#ARGS[@]} -eq 0 ]] && {
				_setup_command_links
				return $?
			}
			command_name="${ARGS[0]}"
		else
			command_name="${invoked_as#ft}"
		fi

		if _is_valid_command "$command_name"; then
			_inform "Executing: $command_name"
			_debug "Command args: ${ARGS[@]:1}"
			"_ftscript_${command_name}" "${ARGS[@]:1}"
		else
			echo "Error: Invalid command '$command_name'" >&2
			echo "Available: ${VALID_COMMANDS[*]/#/ft}" | sed 's/ /, /g' >&2
			return 1
		fi
	}

	_parse_args() {
		while [[ $# -gt 0 ]]; do
			case "$1" in
				--debug) DEBUG=true ;;
				--verbose) VERBOSE=true ;;
				-*) echo "Warning: Unknown option '$1'" >&2 ;;
				*) ARGS+=("$1") ;;
			esac
			shift
		done
	}

	_handle_sourcing() {
		if [[ "$IS_SYMLINKDIR_CREATED" != true ]]; then
			echo "Notice: Command links not set up" >&2
			return 1
		fi

		if [[ "$IS_SCRIPT_IN_PATH" != true ]]; then
			export PATH="${PATH}:${COMMAND_DIR}"
			IS_SCRIPT_IN_PATH=true
			echo "Command links now available" >&2
		else
			echo "Command directory already in PATH" >&2
		fi
	}

	_parse_args "$@"

	if [[ "$IS_SOURCED" == true ]]; then
		_handle_sourcing
	else
		_dispatch_command || exit $?
	fi
}

_SCRIPT_RESOLVED_PATH=$(realpath "${BASH_SOURCE[0]:-$0}" 2>/dev/null) || {
	echo "Error: Unable to resolve script path" >&2
	exit 1
}
_ftscript_internal "$@"
